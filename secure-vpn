#!/bin/bash

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# ------------------------------------------------
# Load config file
# ------------------------------------------------
source "$DIR/config/loadConfig"

# Check if config has been set or not
if [ "$CONFIG_SET" -eq 0 ]; then
	echo "Please first install the script : ./install"
	echo "Then update config in $CONFIG_DIR."
	exit 1
fi

# ------------------------------------------------
# Main
# ------------------------------------------------
function main {
	# Create tmp directory if not exists
	if [ -d "$TMP_DIR" ]; then
		mkdir "$TMP_DIR"
	fi

	case "$1" in
		start)
			iptablesFlush

			iptablesRules

			startVPN

			exit 0
		;;

		stop)
			stopVPN

			exit 0
		;;

		flush-iptables)
			iptablesFlush

			exit 0
		;;

		speedtest)
			speedtestAll

			exit 0
		;;

		*)
			echo "Usage : $0 {start|stop|speedtest|flush-iptables}"
			exit 1
		;;
	esac
}

# ------------------------------------------------
# Flush iptables rules and reset default policy
# ------------------------------------------------
function iptablesFlush
{
	echo "Flush iptables"
	iptables -P INPUT ACCEPT
	iptables -P FORWARD ACCEPT
	iptables -P OUTPUT ACCEPT
	iptables -F
	iptables -X
	iptables -t nat -F
	iptables -t nat -X
	iptables -t mangle -F
	iptables -t mangle -X
}

# ------------------------------------------------
# Add iptables rules
# ------------------------------------------------
function iptablesRules
{
	echo "General iptables rules"

	iptables -P INPUT DROP
	iptables -P FORWARD DROP
	iptables -P OUTPUT DROP

	# Accept packets through VPN
	iptables -A INPUT -i tun+ -j ACCEPT
	iptables -A OUTPUT -o tun+ -j ACCEPT

	# Accept local connections
	iptables -A INPUT -i lo -j ACCEPT
	iptables -A OUTPUT -o lo -j ACCEPT

	# Accept connections from/to VPN servers
	while read line; do
		if [[ "$line" =~ $SRV_LINE_FORMAT ]]; then
			read srvName srvIp srvPort srvProto <<< $line

			#echo "Open connections from/to $srvName : $srvIp $srvPort"

			if [ "$srvIp" != "" ]; then
				iptables -A INPUT -s "$srvIp" -j ACCEPT
				iptables -A OUTPUT -d "$srvIp" -j ACCEPT
			fi
		fi
	done < "$CONFIG_DIR/servers.conf"

	# Accept connections from/to local network
	#iptables -A INPUT -s "$LOCAL_NETWORK" -j ACCEPT
	#iptables -A OUTPUT -d "$LOCAL_NETWORK" -j ACCEPT

	# Disable Reverse Path Filtering on all network interfaces
	for i in /proc/sys/net/ipv4/conf/*/rp_filter ; do
		echo 0 > $i
	done

	# Open allowed ports ports
	for port in $OPEN_PORTS; do
		iptables -A INPUT -p tcp --dport "$port" -j ACCEPT
		iptables -A OUTPUT -p tcp --sport "$port" -j ACCEPT
	done
}



# ------------------------------------------------
# Get status of VPN connection
# ------------------------------------------------
function getStatus {
	currentServer="$1"

	if [[ $(ifconfig | grep "tun0") ]]; then
		if [ "$currentServer" = "" ]; then
			echo "Status: connected"
			return 1
		fi

		currentIp=$(curl http://httpbin.org/ip)

		if [[ "$currentIp" == *"$currentServer"* ]]; then
			echo "Status: connected"
			return 1
		else
			echo "Status: not connected"
			return 0
		fi
	else
		echo "Status: not connected"
		return 0
	fi
}

# ------------------------------------------------
# Start the VPN daemon
# 	Parameters :
#		$1 -> line number of server to use for VPN
# ------------------------------------------------
function startVPN
{
	echo "Start VPN daemon"

	serverToStart="$1"

	daemonPid=$(cat "$TMP_DIR/vpndaemon.pid" 2> /dev/null)
	if [ "$daemonPid" != "" ]; then
		if ps ax | grep -v grep | grep "$daemonPid" > /dev/null; then
			echo "VPN daemon already running..."
			exit 2
		fi
	fi

	nohup bash "$DIR/scripts/vpndaemon" "$serverToStart" > "$TMP_DIR/vpndaemon.log" 2>&1 &
	echo $! > "$TMP_DIR/vpndaemon.pid"
}

# ------------------------------------------------
# Stop the VPN daemon
# ------------------------------------------------
function stopVPN
{
	echo "Stop VPN daemon"

	pkill openvpn

	daemonPid=$(cat "$TMP_DIR/vpndaemon.pid")
	kill "$daemonPid"

	rm -f "$TMP_DIR/vpndaemon.pid"
}

# ------------------------------------------------
# Test speeds of different servers in config
# ------------------------------------------------
function speedtestAll {
	echo "Speedtest of all configured servers"

	# Set variable to use . in floating vars
	export LC_NUMERIC="en_US.UTF-8"

	# Empty log files
	echo "" > "$TMP_DIR/speedtestDlSpeeds.log"
	echo "" > "$TMP_DIR/speedtestUpSpeeds.log"

	# If VPN connected, stop it
	getStatus
	if [[ $? == 1 ]]; then
		stopVPN
	fi

	# FLush iptables for testing speed without VPN
	iptablesFlush

	echo ""
	echo "-------------------------------------------"

	# Test speed without VPN
	echo "Start test... (without vpn)"
	speedtest "without VPN"
	logSpeedtest

	# Apply rules to block traffic not in VPN
	iptablesRules

	# Loop over all servers
	serverLine=0
	while read server; do
		serverLine=$[serverLine + 1]

		# Check server config format
		if [[ "$server" =~ $SRV_LINE_FORMAT ]]; then
			echo ""
			echo "-------------------------------------------"
			echo "Start test... ($server)"

			read srvName srvIp srvPort srvProto <<< $server

			startVPN "$serverLine"

			# Wait for the VPN to connect
			sleep 10

			# If VPN connected -> run speedtest
			getStatus "$srvIp"
			if [[ $? == 1 ]]; then
				speedtest "$server"

			# If VPN not connected, log the error
			else
				echo "VPN failed to connect..."

				dlSpeed="0.0"
				upSpeed="0.0"
			fi

			# Log the results
			logSpeedtest

			stopVPN

			echo "OK."
		fi
	done < "$CONFIG_DIR/servers.conf"

	# Sort results
	sort -r -o "$TMP_DIR/speedtestDlSpeeds.log" "$TMP_DIR/speedtestDlSpeeds.log"
	sort -r -o "$TMP_DIR/speedtestUpSpeeds.log" "$TMP_DIR/speedtestUpSpeeds.log"

	echo "All done !"

	# Show best servers
	echo "10 best DL servers :"
	head -10 "$TMP_DIR/speedtestDlSpeeds.log"

	echo "10 best UP servers :"
	head -10 "$TMP_DIR/speedtestUpSpeeds.log"

	echo "Reordering your servers.conf file with fastest servers on top..."
	echo "" > "$CONFIG_DIR/servers.conf"
	while read result; do
		# Get config line from result
		server=$(echo "$result" | grep -oP "\((.*)\)" | tr -d '()')

		# Check config line format
		if [[ "$server" =~ $SRV_LINE_FORMAT ]]; then
			echo "$server" >> "$CONFIG_DIR/servers.conf"
		fi
	done < "$TMP_DIR/speedtestDlSpeeds.log"

	echo "# Please leave this line at the end, or the last server will not be read" >> "$CONFIG_DIR/servers.conf"
}

# ------------------------------------------------
# Launch speedtest and save results in log files
# ------------------------------------------------
function speedtest {
	server="$1"

	echo "Start Speedtest..."
	speedTestResult=$($SPEEDTEST_CLI --simple)

	dlSpeed=$(printf %03.2f $(echo "$speedTestResult" | grep ^Download | grep -o [0-9]*\\.[0-9]*))
	upSpeed=$(printf %03.2f $(echo "$speedTestResult" | grep ^Upload | grep -o [0-9]*\\.[0-9]*))

	echo "Dl : $dlSpeed Mbits/s"
	echo "Up : $upSpeed Mbits/s"
}

# ------------------------------------------------
# Log the last speedtest result
# ------------------------------------------------
function logSpeedtest {
	echo "$dlSpeed ($server)" >> "$TMP_DIR/speedtestDlSpeeds.log"
	echo "$upSpeed ($server)" >> "$TMP_DIR/speedtestUpSpeeds.log"
}

# Call the main function
main "$1"